rule swissprot_split_pep:
    input:
        fai = transdecoder + "transdecoder.pep.fai"
    output:
        expand(
            swissprot + "chunks/transdecoder_{chunk_id}.tsv",
            chunk_id = [
                '{0:05d}'.format(x) 
                for x in range(0, config["number_of_chunks"]["swissprot_blastp"])
            ]
        )
    params:
        number_of_chunks = config["number_of_chunks"]["swissprot_blastp"]
    log:
        swissprot + "split_pep.log"
    benchmark:
        swissprot + "split_pep.json"
    shell:
        "split "
            "--number l/{params.number_of_chunks} "
            "--numeric-suffixes "
            "--suffix-length 5 "
            "--additional-suffix .tsv "
            "{input.fai} "
            "{swissprot}/chunks/transdecoder_ "
        "2> {log}"



rule swissprot_blastp_chunk:
    input:
        pep = transdecoder + "transdecoder.pep",
        fai = transdecoder + "transdecoder.pep.fai",
        chunk = swissprot + "chunks/transdecoder_{chunk_id}.tsv",
        db = db + "swissprot"
    output:
        tsv = swissprot + "blastp/transdecoder_{chunk_id}.tsv"
    log:
        swissprot + "blastp/transdecoder_{chunk_id}.log"
    benchmark:
        swissprot + "blastp/transdecoder_{chunk_id}.json"
    shell:
        "cut -f 1 {input.chunk} "
        "| xargs samtools faidx {input.pep} "
        "| blastp "
            "-db {input.db} "
            "-max_target_seqs 1 "
            "-outfmt 6 "
            "-evalue 1e-5 "
        "> {output.tsv} " 
        "2> {log}"



rule swissprot_blastp_merge:
    input:
        expand(
            swissprot + "blastp/transdecoder_{chunk_id}.tsv",
            chunk_id = [
                '{0:05d}'.format(x) 
                for x in range(0, config["number_of_chunks"]["swissprot_blastp"])
            ]
        )
    output:
        tsv = swissprot + "blastp.tsv"
    log:
        swissprot + "blastp_merge.log"
    benchmark:
        swissprot + "blastp_merge.json"
    shell:
        "cat {input} > {output} 2> {log}"